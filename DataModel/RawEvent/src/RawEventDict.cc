//
// File generated by /home/huangxt/dyb/external/ROOT/5.26.00e_python2.7/x86_64-slc5-gcc41-dbg/root/bin/rootcint at Mon Oct 28 11:53:49 2013

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RawEventDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void JMcLcLRawEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_JMcLcLRawEvent(void *p = 0);
   static void *newArray_JMcLcLRawEvent(Long_t size, void *p);
   static void delete_JMcLcLRawEvent(void *p);
   static void deleteArray_JMcLcLRawEvent(void *p);
   static void destruct_JMcLcLRawEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JM::RawEvent*)
   {
      ::JM::RawEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::JM::RawEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("JM::RawEvent", ::JM::RawEvent::Class_Version(), "./RawEvent.h", 38,
                  typeid(::JM::RawEvent), DefineBehavior(ptr, ptr),
                  &::JM::RawEvent::Dictionary, isa_proxy, 4,
                  sizeof(::JM::RawEvent) );
      instance.SetNew(&new_JMcLcLRawEvent);
      instance.SetNewArray(&newArray_JMcLcLRawEvent);
      instance.SetDelete(&delete_JMcLcLRawEvent);
      instance.SetDeleteArray(&deleteArray_JMcLcLRawEvent);
      instance.SetDestructor(&destruct_JMcLcLRawEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JM::RawEvent*)
   {
      return GenerateInitInstanceLocal((::JM::RawEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JM::RawEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace JM {
//______________________________________________________________________________
TClass *RawEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RawEvent::Class_Name()
{
   return "JM::RawEvent";
}

//______________________________________________________________________________
const char *RawEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JM::RawEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RawEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JM::RawEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RawEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JM::RawEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RawEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JM::RawEvent*)0x0)->GetClass();
   return fgIsA;
}

} // namespace JM
      namespace JM {
//______________________________________________________________________________
void RawEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class JM::RawEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(JM::RawEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(JM::RawEvent::Class(),this);
   }
}

} // namespace JM
//______________________________________________________________________________
      namespace JM {
void RawEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class JM::RawEvent.
      TClass *R__cl = ::JM::RawEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_Id", &m_Id);
      R__insp.Inspect(R__cl, R__parent, "m_TotalMom", &m_TotalMom);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace JM
namespace ROOT {
   // Wrappers around operator new
   static void *new_JMcLcLRawEvent(void *p) {
      return  p ? new(p) ::JM::RawEvent : new ::JM::RawEvent;
   }
   static void *newArray_JMcLcLRawEvent(Long_t nElements, void *p) {
      return p ? new(p) ::JM::RawEvent[nElements] : new ::JM::RawEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_JMcLcLRawEvent(void *p) {
      delete ((::JM::RawEvent*)p);
   }
   static void deleteArray_JMcLcLRawEvent(void *p) {
      delete [] ((::JM::RawEvent*)p);
   }
   static void destruct_JMcLcLRawEvent(void *p) {
      typedef ::JM::RawEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JM::RawEvent

/********************************************************
* ../src/RawEventDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRawEventDict();

extern "C" void G__set_cpp_environmentRawEventDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("RawEvent.h");
  G__cpp_reset_tagtableRawEventDict();
}
#include <new>
extern "C" int G__cpp_dllrevRawEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* JM::RawEvent */
static int G__RawEventDict_155_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JM::RawEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JM::RawEvent[n];
     } else {
       p = new((void*) gvp) JM::RawEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JM::RawEvent;
     } else {
       p = new((void*) gvp) JM::RawEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const JM::RawEvent*) G__getstructoffset())->Id();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JM::RawEvent*) G__getstructoffset())->setId(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const JM::RawEvent*) G__getstructoffset())->TotalMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JM::RawEvent*) G__getstructoffset())->setTotalMom((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) JM::RawEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::RawEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) JM::RawEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JM::RawEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JM::RawEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::RawEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JM::RawEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::RawEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawEventDict_155_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JM::RawEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawEventDict_155_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JM::RawEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JM::RawEvent(*(JM::RawEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JM::RawEvent G__TJMcLcLRawEvent;
static int G__RawEventDict_155_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JM::RawEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JM::RawEvent*) (soff+(sizeof(JM::RawEvent)*i)))->~G__TJMcLcLRawEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JM::RawEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JM::RawEvent*) (soff))->~G__TJMcLcLRawEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawEventDict_155_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JM::RawEvent* dest = (JM::RawEvent*) G__getstructoffset();
   *dest = *(JM::RawEvent*) libp->para[0].ref;
   const JM::RawEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* JM::RawEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRawEventDict {
 public:
  G__Sizep2memfuncRawEventDict(): p(&G__Sizep2memfuncRawEventDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRawEventDict::*p)();
};

size_t G__get_sizep2memfuncRawEventDict()
{
  G__Sizep2memfuncRawEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRawEventDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent))) {
     JM::RawEvent *G__Lderived;
     G__Lderived=(JM::RawEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent),G__get_linked_tagnum(&G__RawEventDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRawEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RawEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RawEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* JM::RawEvent */
static void G__setup_memvarJMcLcLRawEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent));
   { JM::RawEvent *p; p=(JM::RawEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_Id=",0,"event sequential id");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_TotalMom=",0,"total momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawEventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRawEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncJMcLcLRawEvent(void) {
   /* JM::RawEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent));
   G__memfunc_setup("RawEvent",812,G__RawEventDict_155_0_1, 105, G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Id",173,G__RawEventDict_155_0_2, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setId",505,G__RawEventDict_155_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TotalMom",813,G__RawEventDict_155_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotalMom",1145,G__RawEventDict_155_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawEventDict_155_0_6, 85, G__get_linked_tagnum(&G__RawEventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&JM::RawEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawEventDict_155_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::RawEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawEventDict_155_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&JM::RawEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawEventDict_155_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&JM::RawEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawEventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawEventDict_155_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawEventDict_155_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::RawEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawEventDict_155_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JM::RawEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawEventDict_155_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::RawEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawEventDict_155_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JM::RawEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RawEvent", 812, G__RawEventDict_155_0_18, (int) ('i'), G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent), -1, 0, 1, 1, 1, 0, "u 'JM::RawEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RawEvent", 938, G__RawEventDict_155_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawEventDict_155_0_20, (int) ('u'), G__get_linked_tagnum(&G__RawEventDictLN_JMcLcLRawEvent), -1, 1, 1, 1, 1, 0, "u 'JM::RawEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRawEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRawEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRawEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RawEventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RawEventDictLN_JM = { "JM" , 110 , -1 };
G__linked_taginfo G__RawEventDictLN_JMcLcLRawEvent = { "JM::RawEvent" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRawEventDict() {
  G__RawEventDictLN_TClass.tagnum = -1 ;
  G__RawEventDictLN_TBuffer.tagnum = -1 ;
  G__RawEventDictLN_TMemberInspector.tagnum = -1 ;
  G__RawEventDictLN_TObject.tagnum = -1 ;
  G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RawEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RawEventDictLN_JM.tagnum = -1 ;
  G__RawEventDictLN_JMcLcLRawEvent.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRawEventDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RawEventDictLN_JM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawEventDictLN_JMcLcLRawEvent),sizeof(JM::RawEvent),-1,292096,"For extensive RTTI(Run Time Type Information) and ROOT object I/O and inspection.",G__setup_memvarJMcLcLRawEvent,G__setup_memfuncJMcLcLRawEvent);
}
extern "C" void G__cpp_setupRawEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupRawEventDict()");
  G__set_cpp_environmentRawEventDict();
  G__cpp_setup_tagtableRawEventDict();

  G__cpp_setup_inheritanceRawEventDict();

  G__cpp_setup_typetableRawEventDict();

  G__cpp_setup_memvarRawEventDict();

  G__cpp_setup_memfuncRawEventDict();
  G__cpp_setup_globalRawEventDict();
  G__cpp_setup_funcRawEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRawEventDict();
  return;
}
class G__cpp_setup_initRawEventDict {
  public:
    G__cpp_setup_initRawEventDict() { G__add_setup_func("RawEventDict",(G__incsetup)(&G__cpp_setupRawEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRawEventDict() { G__remove_setup_func("RawEventDict"); }
};
G__cpp_setup_initRawEventDict G__cpp_setup_initializerRawEventDict;

