// $Id: Parsers.icpp,v 1.5 2008/10/28 14:02:18 marcocle Exp $
// ============================================================================
#ifndef GAUDIKERNEL_PARSERS_ICPP
#define GAUDIKERNEL_PARSERS_ICPP 1
// ============================================================================
// Include files
// ============================================================================
// STD&STL
// ============================================================================
#include <vector>
#include <map>
#include <string>
// ============================================================================
// Boost.Bind
// ============================================================================
#include "boost/bind.hpp"
// ============================================================================
// Boost.Spirit
// ============================================================================
//#include "boost/spirit.hpp"
// ============================================================================
// Boost.Spirit.Phoenix
// ============================================================================
//#include "boost/spirit/phoenix.hpp"
#include <boost/version.hpp>
#if BOOST_VERSION >= 103800
// FIXME: Move to the new boost::spirit::classic namespace
#if !defined(BOOST_SPIRIT_USE_OLD_NAMESPACE)
#define BOOST_SPIRIT_USE_OLD_NAMESPACE
#endif
#include <boost/spirit/include/classic.hpp>
#include <boost/spirit/include/phoenix1.hpp>
#else
#include <boost/spirit.hpp>
#include <boost/spirit/phoenix.hpp>
#endif
// ============================================================================
#include "SniperKernel/Parsers.h"
#include "Grammars.h"
// ============================================================================
/** @file
 *
 *  Helper inline functions for implementation of real parsing function
 *  from the namespace Gaudi::Parsers
 *
 *  For adding new type you should have only grammar class which recognize
 *  this type. Then by combining this grammar with such already implemented
 *  grammars  like VectorGrammar, MapGrammar, PairGrammar you can very simply
 *  implement container types which will work with your type.
 *
 *  If you want your type can be handled in property file - see ValueGrammar
 *  in JobOptionsSvc which lays in GaudiSvc.
 *
 *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
 *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
 *  @date   2006-05-12
 */
// ============================================================================
namespace Gaudi
{
  namespace Parsers
  {
    using namespace std;
    using namespace boost::spirit ;

    /// the actual type of position iterator
    typedef boost::spirit::position_iterator<string::const_iterator> IteratorT;

    /// create the position iterator from the inptut
    inline IteratorT createIterator( const std::string& input)
    { return IteratorT ( input.begin(), input.end() ) ; }

    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for integer-like quantities into one templated grammar
     *  @see Gaudi::Parsers::IntGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    // ========================================================================
    template<typename IntegerT>
    inline bool parse_integer
    (IntegerT& result,const string& input)
    {
      IntGrammar<IntegerT> g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1]).full;
    }
    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for vector of iteger-like quantities
     *  into the combination of templated grammars
     *  @see Gaudi::Parsers::VectorGrammar
     *  @see Gaudi::Parsers::IntGrammar
     *  @see Gaudi::Parsers::SkipperGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    // ========================================================================
    template<typename IntegerT>
    inline  bool parse_integer_vector
    ( std::vector<IntegerT>& result,const string& input)
    {
      VectorGrammar<IntGrammar<IntegerT> > g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1],
          SkipperGrammar()).full;
    }
    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for "char-like" quantities into one templated grammar
     *  @see Gaudi::Parsers::CharGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    // ========================================================================
    template<typename CharT>
    inline bool  parse_char
    ( CharT& result , const string& input )
    {
      CharGrammar<CharT> g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1]).full;
    }
    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for vector of 'char-like' quantities
     *  into the combination of templated grammars
     *  @see Gaudi::Parsers::VectorGrammar
     *  @see Gaudi::Parsers::CharGrammar
     *  @see Gaudi::Parsers::SkipperGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    // ========================================================================
    template<typename CharT>
    inline bool parse_char_vector
    (std::vector<CharT>& result,const string& input)
    {
      VectorGrammar<CharGrammar<CharT> > g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1],
          SkipperGrammar()).full;
    }
    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for "float-like" quantities into one templated grammar
     *  @see Gaudi::Parsers::RealGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    template<typename RealT>
    inline bool parse_real
    ( RealT& result , const string& input)
    {
      RealGrammar<RealT> g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1],
          SkipperGrammar()).full;
    }
    // ========================================================================
    /** helper function to "merge" the implementation of all parsers
     *  for vector of 'char-like' quantities
     *  into the combination of templated grammars
     *  @see Gaudi::Parsers::VectorGrammar
     *  @see Gaudi::Parsers::RealGrammar
     *  @see Gaudi::Parsers::SkipperGrammar
     *
     *  @param result (output) parsing result
     *  @param input  (input) string to be parsed
     *  @return status code
     *
     *  @author Alexander MAZUROV  Alexander.Mazurov@gmail.com
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-05-12
     */
    // ========================================================================
    template<typename RealT>
    bool parse_real_vector
    ( std::vector<RealT>& result,const string& input)
    {
      VectorGrammar< RealGrammar<RealT> > g;
      return parse
        ( createIterator(input),
          IteratorT(),
          g[var(result)=arg1],
          SkipperGrammar()).full;
    }
  } // end of namespace Gaudi::Parsers
} // end of namespace Gaudi
// ============================================================================
#endif
// ============================================================================
// The END
// ============================================================================


